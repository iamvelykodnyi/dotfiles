#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

# Colors
# txtblk='\e[0;30m' # Black - Regular
# txtred='\e[0;31m' # Red
# txtgrn='\e[0;32m' # Green
# txtylw='\e[0;33m' # Yellow
# txtblu='\e[0;34m' # Blue
# txtpur='\e[0;35m' # Purple
# txtcyn='\e[0;36m' # Cyan
# txtwht='\e[0;37m' # White
# bldblk='\e[1;30m' # Black - Bold
# bldred='\e[1;31m' # Red
# bldgrn='\e[1;32m' # Green
# bldylw='\e[1;33m' # Yellow
# bldblu='\e[1;34m' # Blue
# bldpur='\e[1;35m' # Purple
# bldcyn='\e[1;36m' # Cyan
# bldwht='\e[1;37m' # White
# unkblk='\e[4;30m' # Black - Underline
# undred='\e[4;31m' # Red
# undgrn='\e[4;32m' # Green
# undylw='\e[4;33m' # Yellow
# undblu='\e[4;34m' # Blue
# undpur='\e[4;35m' # Purple
# undcyn='\e[4;36m' # Cyan
# undwht='\e[4;37m' # White
# bakblk='\e[40m'   # Black - Background
# bakred='\Whitee[41m'   # Red
# bakgrn='\e[42m'   # Green
# bakylw='\e[43m'   # Yellow
# bakblu='\e[44m'   # Blue
# bakpur='\e[45m'   # Purple
# bakcyn='\e[46m'   # Cyan
# bakwht='\e[47m'   #
# txtrst='\e[0m'    # Text Reset
reset="\e[0m";
black="\e[1;30m";
blue="\e[1;34m";
cyan="\e[1;36m";
green="\e[1;32m";
orange="\e[1;33m";
purple="\e[1;35m";
red="\e[1;31m";
violet="\e[1;35m";
white="\e[1;37m";
yellow="\e[1;33m";

# Symbols
symbol_pull="⇣"; # ↓
symbol_push="⇡"; # ↑
symbol_staged="+";
symbol_changed="*";
symbol_untracked="?";
symbol_stashed="$";
symbol_branch=""
symbol_conflict="×"

count_lines() { echo "${1}" | egrep -c "^${2}" ; }
all_lines() { echo "${1}" | grep -v "^$" | wc -l ; }

prompt_git() {
  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
    local gitstatus=$( git diff --name-status 2>&1 );
    local staged_files=$( git diff --staged --name-status );
    local stash_file="$( git rev-parse --git-dir )/logs/refs/stash";
    local branch='';
    local remote='';
    local upstream='';
    local changes='';
    local changed='';
    local conflicts='';
    local staged='';
    local untracked='';
    local stashed='';
    local num_changed='';
    local num_staged_conflicts=$( count_lines "${staged_files}" U );
    local num_changed_conflicts=$( count_lines "${gitstatus}" U );
    local num_staged='';
    local num_untracked='';
    local num_stashed=0;
    local num_ahead='';
    local num_behind='';

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      #
      if (( num_staged_conflicts > 0 )) ; then
        changes+="${symbol_conflict}${num_staged_conflicts}";
      fi

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        num_staged=$(( $( all_lines "${staged_files}" ) - num_staged_conflicts ));
        [ -n "${changes}" ] && changes="${changes}/";
        changes+="${symbol_staged}${num_staged}";
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        num_changed=$(( $( all_lines "${gitstatus}" ) - num_changed_conflicts));
        [ -n "${changes}" ] && changes="${changes}/";
        changes+="${symbol_changed}${num_changed}";
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        num_untracked=$( git ls-files --others --exclude-standard $(git rev-parse --show-cdup) | wc -l );
        [ -n "${changes}" ] && changes="${changes}/";
        changes+="${symbol_untracked}${num_untracked// /}";
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        if [[ -e "${stash_file}" ]]; then
          while IFS='' read -r wcline || [[ -n "${wcline}" ]]; do
            ((num_stashed++))
          done < "${stash_file}"
        fi
        [ -n "${changes}" ] && changes="${changes}/";
        changes+="${symbol_stashed}${num_stashed}";
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    remote_name=$( git config "branch.${branch}.remote" )

    if [[ -n "$remote_name" ]]; then
      merge_name=$( git config "branch.${branch}.merge" )
    else
      remote_name='origin'
      merge_name="refs/heads/${branch}"
    fi

    if [[ "${remote_name}" == '.' ]]; then
      remote_ref="${merge_name}"
    else
      remote_ref="refs/remotes/${remote_name}/${merge_name##refs/heads/}"
    fi

    # detect if the local branch have a remote tracking branch
    upstream=$( git rev-parse --abbrev-ref "${branch}"@{upstream} 2>&1 )

    if [[ "${?}" == 0 ]]; then
      # $( git fetch "${remote_name}" "${branch}" --quiet )
      # get the revision list, and count the leading "<" and ">"
      revgit=$( git rev-list --left-right "${remote_ref}...HEAD" 2>/dev/null )
      if [[ "${?}" == 0 ]]; then
        num_revs=$( all_lines "${revgit}" )
        num_ahead=$( count_lines "${revgit}" "^>" )
        num_behind=$(( num_revs - num_ahead ))
        remote="${num_behind}${symbol_pull}/${num_ahead}${symbol_push}";
      fi
    else
      remote=''
      upstream=''
    fi

    echo -e "${1}${symbol_branch} ${branch} ${2}${changes} ${3}${remote}";
  else
    return;
  fi;
}

# Highlight the user name when logged in as root.
# if [[ "${USER}" == "root" ]]; then
#   userStyle="${red}";
# else
#   userStyle="${orange}";
# fi;

# # Highlight the hostname when connected via SSH.
# if [[ "${SSH_TTY}" ]]; then
#   hostStyle="${bold}${red}";
# else
#   hostStyle="${yellow}";
# fi;

# Set the terminal title and prompt.
# [00:00:00] [~/Path/to/somewhere] [branch-name] [+00/*00/?00/$00] [00↓/00↑]
# \n - new line
# \w - current path
# \t - time
# \u - user name
# \h - host
# \[${reset}\] - reset all modification
# \[${color_name}\] - set color

PS1='';

# date
# PS1+="\[${blue}\]\D{%T} ";

# username
# PS1+="\[${userStyle}\]\u ";

# host
# PS1+="\[${hostStyle}\]\h ";

# working directory full path
# PS1+="\[${green}\]\w";

# Git repository details
PS1+="\$(prompt_git \"\[${violet}\]\" \"\[${yellow}\]\" \"\[${blue}\]\")";

# Enter
# PS1+="\n\[${green}\]> \[${reset}\]";
PS1+="\n\[${green}\]=> \[${reset}\]";
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
